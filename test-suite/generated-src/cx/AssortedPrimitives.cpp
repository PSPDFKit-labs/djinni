// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from primtypes.djinni

#include "AssortedPrimitives.h"  // my header
#include "translation.h"

namespace testsuite {


::testsuite::AssortedPrimitives AssortedPrimitives::toCpp() {
    return ::testsuite::AssortedPrimitives(
        transform<bool, bool>()(B),
        transform<int8_t, int8>()(Eight),
        transform<int16_t, int16>()(Sixteen),
        transform<int32_t, int32>()(Thirtytwo),
        transform<int64_t, int64>()(Sixtyfour),
        transform<float, float32>()(Fthirtytwo),
        transform<double, float64>()(Fsixtyfour),
        transform<std::experimental::optional<bool>, Platform::IBox<bool>^>()(OB),
        transform<std::experimental::optional<int8_t>, Platform::IBox<int8>^>()(OEight),
        transform<std::experimental::optional<int16_t>, Platform::IBox<int16>^>()(OSixteen),
        transform<std::experimental::optional<int32_t>, Platform::IBox<int32>^>()(OThirtytwo),
        transform<std::experimental::optional<int64_t>, Platform::IBox<int64>^>()(OSixtyfour),
        transform<std::experimental::optional<float>, Platform::IBox<float32>^>()(OFthirtytwo),
        transform<std::experimental::optional<double>, Platform::IBox<float64>^>()(OFsixtyfour));
}

AssortedPrimitives^ AssortedPrimitives::fromCpp(const ::testsuite::AssortedPrimitives& value) {
    AssortedPrimitives^ ret = ref new AssortedPrimitives();
    ret->B = transform<bool, bool>()(value.b);
    ret->Eight = transform<int8_t, int8>()(value.eight);
    ret->Sixteen = transform<int16_t, int16>()(value.sixteen);
    ret->Thirtytwo = transform<int32_t, int32>()(value.thirtytwo);
    ret->Sixtyfour = transform<int64_t, int64>()(value.sixtyfour);
    ret->Fthirtytwo = transform<float, float32>()(value.fthirtytwo);
    ret->Fsixtyfour = transform<double, float64>()(value.fsixtyfour);
    ret->OB = transform<std::experimental::optional<bool>, Platform::IBox<bool>^>()(value.o_b);
    ret->OEight = transform<std::experimental::optional<int8_t>, Platform::IBox<int8>^>()(value.o_eight);
    ret->OSixteen = transform<std::experimental::optional<int16_t>, Platform::IBox<int16>^>()(value.o_sixteen);
    ret->OThirtytwo = transform<std::experimental::optional<int32_t>, Platform::IBox<int32>^>()(value.o_thirtytwo);
    ret->OSixtyfour = transform<std::experimental::optional<int64_t>, Platform::IBox<int64>^>()(value.o_sixtyfour);
    ret->OFthirtytwo = transform<std::experimental::optional<float>, Platform::IBox<float32>^>()(value.o_fthirtytwo);
    ret->OFsixtyfour = transform<std::experimental::optional<double>, Platform::IBox<float64>^>()(value.o_fsixtyfour);
    return ret;
}

bool AssortedPrimitives::Equals(AssortedPrimitives^ rhs) {
    return this->B == rhs->B &&
           this->Eight == rhs->Eight &&
           this->Sixteen == rhs->Sixteen &&
           this->Thirtytwo == rhs->Thirtytwo &&
           this->Sixtyfour == rhs->Sixtyfour &&
           this->Fthirtytwo == rhs->Fthirtytwo &&
           this->Fsixtyfour == rhs->Fsixtyfour &&
           this->OB == rhs->OB &&
           this->OEight == rhs->OEight &&
           this->OSixteen == rhs->OSixteen &&
           this->OThirtytwo == rhs->OThirtytwo &&
           this->OSixtyfour == rhs->OSixtyfour &&
           this->OFthirtytwo == rhs->OFthirtytwo &&
           this->OFsixtyfour == rhs->OFsixtyfour;
}

}  // namespace testsuite
