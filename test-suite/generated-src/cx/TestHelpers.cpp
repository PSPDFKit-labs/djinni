// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include "TestHelpers.h"  // my header
#include "AssortedPrimitives.h"
#include "ClientInterfaceProxy.h"
#include "Color.h"
#include "MapListRecord.h"
#include "NestedCollection.h"
#include "PrimitiveList.h"
#include "SetRecord.h"
#include "UserTokenProxy.h"
#include "translation.h"
#include <stdint.h>

namespace testsuite {

SetRecord^ TestHelpers::GetSetRecord ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_set_record();
        return transform<::testsuite::SetRecord, ::testsuite::SetRecord^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckSetRecord (SetRecord^ rec)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_set_record(transform<::testsuite::SetRecord, ::testsuite::SetRecord^>()(rec));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
PrimitiveList^ TestHelpers::GetPrimitiveList ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_primitive_list();
        return transform<::testsuite::PrimitiveList, ::testsuite::PrimitiveList^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckPrimitiveList (PrimitiveList^ pl)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_primitive_list(transform<::testsuite::PrimitiveList, ::testsuite::PrimitiveList^>()(pl));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
NestedCollection^ TestHelpers::GetNestedCollection ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_nested_collection();
        return transform<::testsuite::NestedCollection, ::testsuite::NestedCollection^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckNestedCollection (NestedCollection^ nc)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_nested_collection(transform<::testsuite::NestedCollection, ::testsuite::NestedCollection^>()(nc));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::Collections::IMap<Platform::String^, int64>^ TestHelpers::GetMap ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_map();
        return transform<std::unordered_map<std::string, int64_t>, Windows::Foundation::Collections::IMap<Platform::String^, int64>^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckMap (Windows::Foundation::Collections::IMap<Platform::String^, int64>^ m)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_map(transform<std::unordered_map<std::string, int64_t>, Windows::Foundation::Collections::IMap<Platform::String^, int64>^>()(m));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::Collections::IMap<Platform::String^, int64>^ TestHelpers::GetEmptyMap ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_empty_map();
        return transform<std::unordered_map<std::string, int64_t>, Windows::Foundation::Collections::IMap<Platform::String^, int64>^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckEmptyMap (Windows::Foundation::Collections::IMap<Platform::String^, int64>^ m)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_empty_map(transform<std::unordered_map<std::string, int64_t>, Windows::Foundation::Collections::IMap<Platform::String^, int64>^>()(m));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
MapListRecord^ TestHelpers::GetMapListRecord ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::get_map_list_record();
        return transform<::testsuite::MapListRecord, ::testsuite::MapListRecord^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
bool TestHelpers::CheckMapListRecord (MapListRecord^ m)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::check_map_list_record(transform<::testsuite::MapListRecord, ::testsuite::MapListRecord^>()(m));
        return transform<bool, bool>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckClientInterfaceAscii (IClientInterface^ i)
{
    try {
        ::testsuite::TestHelpers::check_client_interface_ascii(transform<std::shared_ptr<::testsuite::ClientInterface>, ::testsuite::IClientInterface^>()(i));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckClientInterfaceNonascii (IClientInterface^ i)
{
    try {
        ::testsuite::TestHelpers::check_client_interface_nonascii(transform<std::shared_ptr<::testsuite::ClientInterface>, ::testsuite::IClientInterface^>()(i));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckClientInterfaceArgs (IClientInterface^ i)
{
    try {
        ::testsuite::TestHelpers::check_client_interface_args(transform<std::shared_ptr<::testsuite::ClientInterface>, ::testsuite::IClientInterface^>()(i));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckEnumMap (Windows::Foundation::Collections::IMap<Color, Platform::String^>^ m)
{
    try {
        ::testsuite::TestHelpers::check_enum_map(transform<std::unordered_map<::testsuite::color, std::string>, Windows::Foundation::Collections::IMap<::testsuite::Color, Platform::String^>^>()(m));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckEnum (Color c)
{
    try {
        ::testsuite::TestHelpers::check_enum(transform<::testsuite::color, ::testsuite::Color>()(c));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
IUserToken^ TestHelpers::TokenId (IUserToken^ t)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::token_id(transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(t));
        return transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
IUserToken^ TestHelpers::CreateCppToken ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::create_cpp_token();
        return transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckCppToken (IUserToken^ t)
{
    try {
        ::testsuite::TestHelpers::check_cpp_token(transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(t));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
int64 TestHelpers::CppTokenId (IUserToken^ t)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::cpp_token_id(transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(t));
        return transform<int64_t, int64>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void TestHelpers::CheckTokenType (IUserToken^ t, Platform::String^ type)
{
    try {
        ::testsuite::TestHelpers::check_token_type(transform<std::shared_ptr<::testsuite::UserToken>, ::testsuite::IUserToken^>()(t), transform<std::string, Platform::String^>()(type));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::IBox<int32>^ TestHelpers::ReturnNone ()
{
    try {
        auto cppRet = ::testsuite::TestHelpers::return_none();
        return transform<std::experimental::optional<int32_t>, Platform::IBox<int32>^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
AssortedPrimitives^ TestHelpers::AssortedPrimitivesId (AssortedPrimitives^ i)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::assorted_primitives_id(transform<::testsuite::AssortedPrimitives, ::testsuite::AssortedPrimitives^>()(i));
        return transform<::testsuite::AssortedPrimitives, ::testsuite::AssortedPrimitives^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::Array<uint8_t>^ TestHelpers::IdBinary (const Platform::Array<uint8_t>^ b)
{
    try {
        auto cppRet = ::testsuite::TestHelpers::id_binary(transform<std::vector<uint8_t>, Platform::Array<uint8_t>^>()(b));
        return transform<std::vector<uint8_t>, Platform::Array<uint8_t>^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}

}  // namespace testsuite
