// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from derivings.djinni

#include "RecordWithDerivings.h"  // my header
#include "translation.h"

namespace testsuite {


::testsuite::RecordWithDerivings RecordWithDerivings::toCpp() {
    return ::testsuite::RecordWithDerivings(
        transform<int8_t, int8>()(Eight),
        transform<int16_t, int16>()(Sixteen),
        transform<int32_t, int32>()(Thirtytwo),
        transform<int64_t, int64>()(Sixtyfour),
        transform<float, float32>()(Fthirtytwo),
        transform<double, float64>()(Fsixtyfour),
        transform<std::chrono::system_clock::time_point, Windows::Foundation::DateTime^>()(D),
        transform<std::string, Platform::String^>()(S));
}

RecordWithDerivings^ RecordWithDerivings::fromCpp(const ::testsuite::RecordWithDerivings& value) {
    RecordWithDerivings^ ret = ref new RecordWithDerivings();
    ret->Eight = transform<int8_t, int8>()(value.eight);
    ret->Sixteen = transform<int16_t, int16>()(value.sixteen);
    ret->Thirtytwo = transform<int32_t, int32>()(value.thirtytwo);
    ret->Sixtyfour = transform<int64_t, int64>()(value.sixtyfour);
    ret->Fthirtytwo = transform<float, float32>()(value.fthirtytwo);
    ret->Fsixtyfour = transform<double, float64>()(value.fsixtyfour);
    ret->D = transform<std::chrono::system_clock::time_point, Windows::Foundation::DateTime^>()(value.d);
    ret->S = transform<std::string, Platform::String^>()(value.s);
    return ret;
}

bool RecordWithDerivings::Equals(RecordWithDerivings^ rhs) {
    return this->Eight == rhs->Eight &&
           this->Sixteen == rhs->Sixteen &&
           this->Thirtytwo == rhs->Thirtytwo &&
           this->Sixtyfour == rhs->Sixtyfour &&
           this->Fthirtytwo == rhs->Fthirtytwo &&
           this->Fsixtyfour == rhs->Fsixtyfour &&
           this->D == rhs->D &&
           this->S == rhs->S;
}

int32 RecordWithDerivings::CompareTo(RecordWithDerivings^ rhs) {
    if (rhs == nullptr) return 1;
    int32 tempResult = 0;
    if (this->Eight < rhs->Eight) {
        return -1;
    } else if (rhs->Eight < this->Eight) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->Sixteen < rhs->Sixteen) {
        return -1;
    } else if (rhs->Sixteen < this->Sixteen) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->Thirtytwo < rhs->Thirtytwo) {
        return -1;
    } else if (rhs->Thirtytwo < this->Thirtytwo) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->Sixtyfour < rhs->Sixtyfour) {
        return -1;
    } else if (rhs->Sixtyfour < this->Sixtyfour) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->Fthirtytwo < rhs->Fthirtytwo) {
        return -1;
    } else if (rhs->Fthirtytwo < this->Fthirtytwo) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->Fsixtyfour < rhs->Fsixtyfour) {
        return -1;
    } else if (rhs->Fsixtyfour < this->Fsixtyfour) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    if (this->D < rhs->D) {
        return -1;
    } else if (rhs->D < this->D) {
        tempResult = 1;
    } else {
        tempResult = 0;
    }
    if(tempResult) return tempResult;
    tempResult = Platform::String::CompareOrdinal(this->S, rhs->S);
    if(tempResult) return tempResult;
    return 0;
}

}  // namespace testsuite
